!        Generated by TAPENADE     (INRIA, Ecuador team)
!  Tapenade 3.10 (r5717) - 30 Jul 2015 16:03
!
!  Differentiation of forecast in forward (tangent) mode:
!   variations   of useful results: y
!   with respect to varying inputs: x
!   RW status of diff variables: x:in y:out
SUBROUTINE LZ95_FORECAST_TLM(x, xd, yd, n, f, dt)
  ! This subroutine computes the tangent linear model of the RK4
  ! integration of the Lorenz governing equations
  !
  ! dX[k] / dt = X[k] * (X[k + 1] - X[k - 2]) - X[k] + F
  !
  ! using Tapenade. The comments above the subroutine were generated
  ! by Tapenade. The auto-generated code was modified to suit the
  ! needs of the user.
  !
  ! Inputs:
  !     x - Vector of X-variables
  !     xd - Direction vector
  !     n - Length of x
  !     F - Constant forcing term
  !
  ! Output:
  !     yd - The tangent model evaluated at x in the direction of yb.
  !
  ! References:
  !     [1] Lorenz, E. N. and Emanuel K. A. (1998). Optimal Sites for
  !         Supplementary Weather Observations: Simulation with a
  !         Small Model. Journal of the Atmospheric Sciences.
  !
  !     [2] Hascoët, Laurent and Pascual, Valérie. (2013). The
  !         Tapenade Automatic Differentiation Tool: Principles,
  !         Model, and Specification.
  !
  ! Author:             Tapenade 3.10
  ! Edited by:          Jeremy Shaw
  ! Institution:        Portland State University
  ! Date Created:       18 November 2015
  ! Last Modified Date: 10 November 2016
  IMPLICIT NONE
  INTEGER, INTENT(IN) :: n
  DOUBLE PRECISION, DIMENSION(n), INTENT(IN) :: x
  DOUBLE PRECISION, DIMENSION(n), INTENT(IN) :: xd
  DOUBLE PRECISION, DIMENSION(n), INTENT(OUT) :: yd
  DOUBLE PRECISION, INTENT(IN) :: f
  DOUBLE PRECISION, INTENT(IN) :: dt
  DOUBLE PRECISION, DIMENSION(n) :: k1
  DOUBLE PRECISION, DIMENSION(n) :: k1d
  DOUBLE PRECISION, DIMENSION(n) :: k2
  DOUBLE PRECISION, DIMENSION(n) :: k2d
  DOUBLE PRECISION, DIMENSION(n) :: k3
  DOUBLE PRECISION, DIMENSION(n) :: k3d
  DOUBLE PRECISION, DIMENSION(n) :: k4d
  CALL LZ95_MODEL_TLM(x, xd, k1d, n, f)
  call lz95_model(x, k1, n, F)
  CALL LZ95_MODEL_TLM(x + dt/2.d0*k1, xd + dt*k1d/2.d0, k2d, n, f)
  call lz95_model(x + (dt / 2.D0) * k1, k2, n, F)
  CALL LZ95_MODEL_TLM(x + dt/2.d0*k2, xd + dt*k2d/2.d0, k3d, n, f)
  call lz95_model(x + (dt / 2.D0) * k2, k3, n, F)
  CALL LZ95_MODEL_TLM(x + dt*k3, xd + dt*k3d, k4d, n, f)
  yd = xd + dt*(k1d+2.d0*k2d+2.d0*k3d+k4d)/6.d0
END SUBROUTINE LZ95_FORECAST_TLM
