!        Generated by TAPENADE     (INRIA, Ecuador team)
!  Tapenade 3.10 (r5717) - 30 Jul 2015 16:03
!
!  Differentiation of forecast in forward (tangent) mode:
!   variations   of useful results: y
!   with respect to varying inputs: x
!   RW status of diff variables: x:in y:out
SUBROUTINE LZ96_FORECAST_TLM(x, xd, yd, b, c, F, h, J, K, n, dt)
  ! This subroutine computes the tangent linear model of the RK4 integration
  ! of the governing equations for the Lorenz multi-scale model
  !
  !    dX[k] / dt = X[k - 1] * (X[k + 1] - X[k - 2]) - X[k] - (h * c / b)
  !                 * sum_{j = 1}^J Y[j, k] + F                       (1)
  ! dY[j, k] / dt = c * b * Y[j + 1, k] * (Y[j - 1, k] - Y[j + 2, k]) - 
  !                 c * Y[j, k] + (h * c / b) * X[k]                  (2)
  !
  ! using Tapenade. The comments above the subroutine were generated by
  ! Tapenade. The auto-generated code was modified to suit the needs of the
  ! user.
  !
  ! Inputs:
  !     x - Input state vector
  !     xd - Direction vector
  !     b, c, F, h - Model parameters
  !     J - Number of small-scale Y-variables between two X-variables
  !     K - Number of X-variables
  !     n - Length of x
  !
  ! Output:
  !     yd - The tangent linear model evaluated at x in the direction of xd.
  !
  ! References:
  !     [1] Lorenz, E. N. (1996). Predictability: A problem partly solved.
  !         Proc. Seminar on predictability.
  !     [2] Lorenz, E. N. and Emanuel K. A. (1998). Optimal Sites for
  !         Supplementary Weather Observations: Simulation with a Small Model.
  !         Journal of the Atmospheric Sciences.
  !     [3] Hascoët, Laurent and Pascual, Valérie. (2013). The Tapenade
  !         Automatic Differentiation Tool: Principles, Model, and
  !         Specification.
  !
  ! Author:             Tapenade 3.10
  ! Edited by:          Jeremy Shaw
  ! Institution:        Portland State University
  ! Date Created:       18 November 2015
  ! Last Modified Date: 20 November 2015
  IMPLICIT NONE
  INTEGER, INTENT(IN) :: n
  DOUBLE PRECISION, DIMENSION(n), INTENT(IN) :: x
  DOUBLE PRECISION, DIMENSION(n), INTENT(IN) :: xd
  DOUBLE PRECISION, DIMENSION(n), INTENT(OUT) :: yd
  double precision, intent(in) :: b
  double precision, intent(in) :: c
  double precision, intent(in) :: F
  double precision, intent(in) :: h
  double precision, intent(in) :: dt
  integer, intent(in) :: J
  integer, intent(in) :: K
  DOUBLE PRECISION, DIMENSION(n) :: k1
  DOUBLE PRECISION, DIMENSION(n) :: k1d
  DOUBLE PRECISION, DIMENSION(n) :: k2
  DOUBLE PRECISION, DIMENSION(n) :: k2d
  DOUBLE PRECISION, DIMENSION(n) :: k3
  DOUBLE PRECISION, DIMENSION(n) :: k3d
  DOUBLE PRECISION, DIMENSION(n) :: k4d

  CALL LZ96_MODEL_TLM(x, xd, k1d, b, c, f, h, j, k, n)
  call lz96_model(x, k1, b, c, F, h, J, K, n)
  CALL LZ96_MODEL_TLM(x + dt/2.d0*k1, xd + dt*k1d/2.d0, k2d, b, c, f, h, j, k, n)
  call lz96_model(x + (dt / 2.D0) * k1, k2, b, c, F, h, J, K, n)
  CALL LZ96_MODEL_TLM(x + dt/2.d0*k2, xd + dt*k2d/2.d0, k3d, b, c, f, h, j, k, n)
  call lz96_model(x + (dt / 2.D0) * k2, k3, b, c, F, h, J, K, n)
  CALL LZ96_MODEL_TLM(x + dt*k3, xd + dt*k3d, k4d, b, c, f, h, j, k, n)
  yd = xd + dt*(k1d+2.d0*k2d+2.d0*k3d+k4d)/6.d0
END SUBROUTINE LZ96_FORECAST_TLM
