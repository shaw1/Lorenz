!        Generated by TAPENADE     (INRIA, Ecuador team)
!  Tapenade 3.10 (r5717) - 30 Jul 2015 16:03
!
!  Differentiation of lz96_forecast in reverse (adjoint) mode:
!   gradient     of useful results: y
!   with respect to varying inputs: x y
!   RW status of diff variables: x:out y:in-zero
SUBROUTINE LZ96_FORECAST_ADJ(x, xb, yb, b, c, f, h, j, k, n, dt)
  ! This subroutine computes the adjoint model of the RK4 integration
  ! of the governing equations for the Lorenz multi-scale model
  !
  ! dX[k] / dt = X[k - 1] * (X[k + 1] - X[k - 2]) - X[k] - (h * c / b)
  !                 * sum_{j = 1}^J Y[j, k] + F                    (1)
  ! dY[j, k] / dt = c * b * Y[j + 1, k] * (Y[j - 1, k] - Y[j + 2, k]) 
  !                 - c * Y[j, k] + (h * c / b) * X[k]             (2)
  !
  ! using Tapenade. The comments above the subroutine were generated
  ! by Tapenade. The auto-generated code was modified to suit the
  ! needs of the user.
  !
  ! Inputs:
  !     x - Input state vector
  !     yb - Direction vector
  !     b, c, F, h - Model parameters
  !     J - Number of small-scale Y-variables between two X-variables
  !     K - Number of X-variables
  !     n - Length of x
  !
  ! Output:
  !     xb - The adjoint model evaluated at x in the direction of yb.
  !
  ! References:
  !     [1] Lorenz, E. N. (1996). Predictability: A problem partly
  !         solved. Proc. Seminar on predictability.
  !     [2] Lorenz, E. N. and Emanuel K. A. (1998). Optimal Sites for
  !         Supplementary Weather Observations: Simulation with a
  !         Small Model. Journal of the Atmospheric Sciences.
  !     [3] Hascoët, Laurent and Pascual, Valérie. (2013). The
  !         Tapenade Automatic Differentiation Tool: Principles,
  !         Model, and Specification.
  !
  ! Author:             Tapenade 3.10
  ! Edited by:          Jeremy Shaw
  ! Institution:        Portland State University
  ! Date Created:       18 November 2015
  ! Last Modified Date: 10 November 2016
  IMPLICIT NONE
  INTEGER, INTENT(IN) :: n
  DOUBLE PRECISION, DIMENSION(n), INTENT(IN) :: x
  DOUBLE PRECISION, DIMENSION(n), intent(out) :: xb
  DOUBLE PRECISION, DIMENSION(n), intent(in) :: yb
  DOUBLE PRECISION, INTENT(IN) :: b
  DOUBLE PRECISION, INTENT(IN) :: c
  DOUBLE PRECISION, INTENT(IN) :: f
  DOUBLE PRECISION, INTENT(IN) :: h
  DOUBLE PRECISION, INTENT(IN) :: dt
  INTEGER, INTENT(IN) :: j
  INTEGER, INTENT(IN) :: k
  DOUBLE PRECISION, DIMENSION(n) :: k1
  DOUBLE PRECISION, DIMENSION(n) :: k1b
  DOUBLE PRECISION, DIMENSION(n) :: k2
  DOUBLE PRECISION, DIMENSION(n) :: k2b
  DOUBLE PRECISION, DIMENSION(n) :: k3
  DOUBLE PRECISION, DIMENSION(n) :: k3b
  DOUBLE PRECISION, DIMENSION(n) :: k4b
  DOUBLE PRECISION, DIMENSION(n) :: arg1
  DOUBLE PRECISION, DIMENSION(n) :: arg1b
  DOUBLE PRECISION :: tempb(n)
  CALL LZ96_MODEL(x, k1, b, c, f, h, j, k, n)
  arg1(:) = x + dt/2.d0*k1
  CALL LZ96_MODEL(arg1(:), k2, b, c, f, h, j, k, n)
  arg1(:) = x + dt/2.d0*k2
  CALL LZ96_MODEL(arg1(:), k3, b, c, f, h, j, k, n)
  arg1(:) = x + dt*k3
  xb = 0.D0
  k1b = 0.D0
  k2b = 0.D0
  k3b = 0.D0
  k4b = 0.D0
  tempb = dt*yb/6.d0
  k4b = tempb
  arg1b = 0.D0
  CALL LZ96_MODEL_ADJ(arg1(:), arg1b(:), k4b, b, c, f, h, j, k, n)
  xb = arg1b(:) + yb
  k3b = dt*arg1b(:) + 2.d0*tempb
  arg1(:) = x + dt/2.d0*k2
  arg1b = 0.D0
  CALL LZ96_MODEL_ADJ(arg1(:), arg1b(:), k3b, b, c, f, h, j, k, n)
  k2b = dt*arg1b(:)/2.d0 + 2.d0*tempb
  xb = xb + arg1b
  arg1(:) = x + dt/2.d0*k1
  arg1b = 0.D0
  CALL LZ96_MODEL_ADJ(arg1(:), arg1b(:), k2b, b, c, f, h, j, k, n)
  k1b = dt*arg1b(:)/2.d0 + tempb
  xb = xb + arg1b
  CALL LZ96_MODEL_ADJ(x, xb, k1b, b, c, f, h, j, k, n)
END SUBROUTINE LZ96_FORECAST_ADJ
