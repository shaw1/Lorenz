!        Generated by TAPENADE     (INRIA, Ecuador team)
!  Tapenade 3.10 (r5717) - 30 Jul 2015 16:03
!
!  Differentiation of lz96model in forward (tangent) mode:
!   variations   of useful results: y
!   with respect to varying inputs: x
!   RW status of diff variables: x:in y:out
SUBROUTINE LZ96_MODEL_TLM(x, xd, yd, b, c, f, h, j, k, n)
  ! This subroutine computes the tangent linear model of the governing
  ! equations for the Lorenz multi-scale model
  !
  !    dX[k] / dt = X[k - 1] * (X[k + 1] - X[k - 2]) - X[k] - (h * c / b)
  !                 * sum_{j = 1}^J Y[j, k] + F                       (1)
  ! dY[j, k] / dt = c * b * Y[j + 1, k] * (Y[j - 1, k] - Y[j + 2, k]) - 
  !                 c * Y[j, k] + (h * c / b) * X[k]                  (2)
  !
  ! using Tapenade. The comments above the subroutine were generated by
  ! Tapenade. The auto-generated code was modified to suit the needs of the
  ! user.
  !
  ! Inputs:
  !     x - Input state vector
  !     xd - Direction vector
  !     b, c, F, h - Model parameters
  !     J - Number of small-scale Y-variables between two X-variables
  !     K - Number of X-variables
  !     n - Length of x
  !
  ! Output:
  !     yd - The tangent linear model evaluated at x in the direction of xd.
  !
  ! References:
  !     [1] Lorenz, E. N. (1996). Predictability: A problem partly solved.
  !         Proc. Seminar on predictability.
  !     [2] Lorenz, E. N. and Emanuel K. A. (1998). Optimal Sites for
  !         Supplementary Weather Observations: Simulation with a Small Model.
  !         Journal of the Atmospheric Sciences.
  !     [3] Hascoët, Laurent and Pascual, Valérie. (2013). The Tapenade
  !         Automatic Differentiation Tool: Principles, Model, and
  !         Specification.
  !
  ! Author:             Tapenade 3.10
  ! Edited by:          Jeremy Shaw
  ! Institution:        Portland State University
  ! Date Created:       18 November 2015
  ! Last Modified Date: 20 November 2015
  IMPLICIT NONE
  INTEGER, INTENT(IN) :: n
  DOUBLE PRECISION, DIMENSION(n), INTENT(IN) :: x
  DOUBLE PRECISION, DIMENSION(n), INTENT(IN) :: xd
  DOUBLE PRECISION, DIMENSION(n), INTENT(OUT) :: yd
  DOUBLE PRECISION, INTENT(IN) :: b
  DOUBLE PRECISION, INTENT(IN) :: c
  DOUBLE PRECISION, INTENT(IN) :: f
  DOUBLE PRECISION, INTENT(IN) :: h
  INTEGER, INTENT(IN) :: j
  INTEGER, INTENT(IN) :: k
  INTEGER :: i
  INTEGER :: kk
  INTEGER :: jj
  DOUBLE PRECISION :: hc_over_b
  DOUBLE PRECISION :: c_times_b
  INTRINSIC SUM
  hc_over_b = h*c/b
  c_times_b = c*b
  yd = 0.D0
  yd(1) = xd(k)*(x(2)-x(k-1)) + x(k)*(xd(2)-xd(k-1)) - xd(1) - hc_over_b&
&   *SUM(xd(k+1:k+j))

  yd(2) = xd(1)*(x(3)-x(k)) + x(1)*(xd(3)-xd(k)) - xd(2) - hc_over_b*SUM&
&   (xd(k+j+1:2*j+k))

  DO kk=3,k-1
    yd(kk) = xd(kk-1)*(x(kk+1)-x(kk-2)) + x(kk-1)*(xd(kk+1)-xd(kk-2)) - &
&     xd(kk) - hc_over_b*SUM(xd((kk-1)*j+k+1:kk*j+k))
  END DO
  yd(k) = xd(k-1)*(x(1)-x(k-2)) + x(k-1)*(xd(1)-xd(k-2)) - xd(k) - &
&   hc_over_b*SUM(xd((k-1)*j+k+1:(j+1)*k))

  yd(k+1) = c_times_b*(xd(k+2)*(x((j+1)*k)-x(k+3))+x(k+2)*(xd((j+1)*k)-&
&   xd(k+3))) - c*xd(k+1) + hc_over_b*xd(1)
  DO i=k+2,(j+1)*k-2
    yd(i) = c_times_b*(xd(i+1)*(x(i-1)-x(i+2))+x(i+1)*(xd(i-1)-xd(i+2)))&
&     - c*xd(i) + hc_over_b*xd((i-k-1)/j+1)
  END DO
  jj = (j+1)*k - 1
  yd(jj) = c_times_b*(xd(jj+1)*(x(jj-1)-x(k+1))+x(jj+1)*(xd(jj-1)-xd(k+1&
&   ))) - c*xd(jj) + hc_over_b*xd(k)

  yd(jj+1) = c_times_b*(xd(k+1)*(x(jj)-x(k+2))+x(k+1)*(xd(jj)-xd(k+2))) &
&   - c*xd(jj+1) + hc_over_b*xd(k)
END SUBROUTINE LZ96_MODEL_TLM
